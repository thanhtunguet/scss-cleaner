{"version":3,"sources":["views/App.service.ts","views/App.tsx","serviceWorker.ts","index.tsx"],"names":["STYLE_USAGE_REGEX","MIXIN_USAGE_REGEX","appService","getCodeMirrorOption","mode","theme","lineNumbers","viewportMargin","Infinity","inputStyle","clean","scss","usedClasses","ast","parse","newNodes","value","filter","node","type","selectorNode","classNode","identifierNode","hasOwnProperty","newScss","stringify","trim","this","formatRuleSpacing","getNumLineOfCodeRemoved","oldScss","split","length","join","getUsedClasses","tsx","map","matches","matchAll","result","next","done","matchArray","className","getMixinDeclarations","keyword","rootNode","forEach","keywordNode","flatten","nodes","push","Array","subNode","removeUnusedMixins","mixins","nodeName","scssOptions","tsxOptions","App","React","useState","setScss","handleChangeScss","useCallback","data","handleChangeTsx","handleChangeClasses","useMemo","handleClean","removedLines","message","info","span","options","onBeforeChange","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.faf698a0.chunk.js","sourcesContent":["import type {EditorConfiguration} from 'codemirror';\nimport {Node, parse, stringify} from 'scss-parser';\n\nexport const STYLE_USAGE_REGEX: RegExp = /styles((\\.([_a-zA-Z0-9]+))|(\\['([_\\-a-zA-Z0-9]+)'\\]))/gm;\n\nexport const MIXIN_USAGE_REGEX: RegExp = /@include ([A-z0-9-]+)/gm;\n\nexport interface AppService {\n  getCodeMirrorOption(mode: string): EditorConfiguration;\n\n  clean(scss: string, usedClasses: Record<string, string>): string;\n\n  getNumLineOfCodeRemoved(oldScss: string, newScss: string): number;\n\n  formatRuleSpacing(scss: string): string;\n\n  getMixinDeclarations(\n    scss: string,\n    keyword?: string,\n    type?: string,\n  ): Record<string, string>;\n\n  removeUnusedMixins(scss: string): string;\n\n  getUsedClasses(tsx: string): Record<string, string>;\n\n  flatten(rootNode: Node): Node[];\n}\n\nexport const appService: AppService = {\n  getCodeMirrorOption(mode: string): EditorConfiguration {\n    return {\n      mode,\n      theme: 'monokai',\n      lineNumbers: true,\n      viewportMargin: Infinity,\n      inputStyle: 'contenteditable',\n    };\n  },\n\n  clean(scss: string, usedClasses: Record<string, string>): string {\n    const ast = parse(scss);\n    const newNodes: Node[] = (ast.value as Node[]).filter((node) => {\n      if (node.type !== 'space') {\n        if (node.type === 'rule') {\n          const selectorNode: Node = node.value[0] as Node;\n          if (selectorNode.type === 'selector') {\n            const classNode: Node = selectorNode.value[0] as Node;\n            if (classNode.type === 'class') {\n              const identifierNode: Node = classNode.value[0] as Node;\n              if (identifierNode.type === 'identifier') {\n                if (\n                  !usedClasses.hasOwnProperty(identifierNode.value as string)\n                ) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        return true;\n      }\n      return true;\n    });\n\n    const newScss: string = stringify({\n      ...ast,\n      value: newNodes,\n    }).trim();\n    return this.formatRuleSpacing(newScss);\n  },\n\n  getNumLineOfCodeRemoved(oldScss: string, newScss: string): number {\n    const oldLength: number = oldScss.split('\\n').length;\n    const newLength: number = newScss.split('\\n').length;\n    return oldLength - newLength;\n  },\n\n  formatRuleSpacing(scss: string): string {\n    return scss.split(/\\n{2,}/).join('\\n\\n') + '\\n';\n  },\n\n  getUsedClasses(tsx: string): Record<string, string> {\n    const map: Record<string, string> = {};\n    const matches: IterableIterator<RegExpMatchArray> = tsx.matchAll(\n      STYLE_USAGE_REGEX,\n    );\n    if (matches) {\n      let result: IteratorResult<RegExpMatchArray> = matches.next();\n      while (!result.done) {\n        const matchArray: RegExpMatchArray = result.value;\n        const className: string =\n          typeof matchArray[3] === 'undefined' ? matchArray[5] : matchArray[3];\n        map[className] = className;\n        result = matches.next();\n      }\n    }\n    return map;\n  },\n\n  getMixinDeclarations(\n    scss: string,\n    keyword: string = 'mixin',\n    type: string = 'identifier',\n  ): Record<string, string> {\n    const map: Record<string, string> = {};\n    const rootNode: Node = parse(scss);\n    (rootNode.value as Node[]).forEach((node) => {\n      if (typeof node === 'object') {\n        if (node.type === 'atrule') {\n          const keywordNode: Node = node.value[0] as Node;\n          const identifierNode: Node = node.value[2] as Node;\n          if (\n            typeof identifierNode === 'object' &&\n            identifierNode?.type === type &&\n            typeof keywordNode === 'object' &&\n            keywordNode.value === keyword &&\n            typeof identifierNode.value === 'string'\n          ) {\n            map[identifierNode.value] = identifierNode.value;\n          }\n        }\n      }\n    });\n    return map;\n  },\n\n  flatten(rootNode: Node): Node[] {\n    const nodes: Node[] = [];\n    nodes.push(rootNode);\n    if (rootNode?.value instanceof Array) {\n      rootNode.value.forEach((subNode) => {\n        nodes.push(...this.flatten(subNode));\n      });\n    }\n    return nodes;\n  },\n\n  removeUnusedMixins(scss: string): string {\n    const rootNode: Node = parse(scss);\n    const mixins: Record<string, string> = this.getMixinDeclarations(scss);\n\n    const matches: IterableIterator<RegExpMatchArray> = scss.matchAll(\n      MIXIN_USAGE_REGEX,\n    );\n    let result: IteratorResult<RegExpMatchArray> = matches?.next();\n    while (!result?.done) {\n      if (mixins.hasOwnProperty(result.value[1])) {\n        delete mixins[result.value[1]];\n      }\n      result = matches.next();\n    }\n\n    rootNode.value = (rootNode.value as Node[]).filter((node) => {\n      if (typeof node === 'object') {\n        if (node.type === 'atrule') {\n          const keywordNode: Node = node.value[0] as Node;\n          const identifierNode: Node = node.value[2] as Node;\n          if (\n            typeof identifierNode === 'object' &&\n            identifierNode?.type === 'identifier' &&\n            typeof keywordNode === 'object' &&\n            keywordNode.value === 'mixin' &&\n            typeof identifierNode.value === 'string'\n          ) {\n            const nodeName: string = identifierNode.value;\n            return !mixins.hasOwnProperty(nodeName);\n          }\n        }\n      }\n      return true;\n    });\n    return this.formatRuleSpacing(stringify(rootNode));\n  },\n};\n","import React from 'react';\nimport 'src/views/App.scss';\nimport Button from 'antd/lib/button';\nimport {Col, Row} from 'antd/lib/grid';\nimport {Controlled as CodeMirror} from 'react-codemirror2';\nimport {appService} from 'src/views/App.service';\nimport 'codemirror/mode/sass/sass';\nimport 'codemirror/mode/jsx/jsx';\nimport {message} from 'antd';\nimport {EditorConfiguration} from 'codemirror';\n\nconst scssOptions: EditorConfiguration = appService.getCodeMirrorOption('sass');\nconst tsxOptions: EditorConfiguration = appService.getCodeMirrorOption('jsx');\n\nfunction App() {\n  const [scss, setScss] = React.useState<string>('');\n  const handleChangeScss = React.useCallback((...[, , data]) => {\n    setScss(data);\n  }, []);\n\n  const [tsx, handleChangeTsx] = React.useState<string>('');\n  const handleChangeClasses = React.useCallback((...[, , data]) => {\n    handleChangeTsx(data);\n  }, []);\n\n  const usedClasses: Record<string, string> = React.useMemo(() => {\n    return appService.getUsedClasses(tsx);\n  }, [tsx]);\n\n  const handleClean = React.useCallback(() => {\n    const newScss: string = appService.removeUnusedMixins(\n      appService.clean(scss, usedClasses),\n    );\n    const removedLines: number = appService.getNumLineOfCodeRemoved(\n      scss,\n      newScss,\n    );\n    message.info(`${removedLines} lines of code removed`);\n    setScss(newScss);\n  }, [scss, usedClasses]);\n\n  return (\n    <div className=\"app\">\n      <Row>\n        <Col span={12} className=\"px-2\">\n          <h3 className=\"h3\">TSX Code</h3>\n          <CodeMirror\n            options={tsxOptions}\n            value={tsx}\n            onBeforeChange={handleChangeClasses}\n          />\n        </Col>\n        <Col span={12} className=\"px-2\">\n          <h3 className=\"h3\">SCSS Code</h3>\n          <CodeMirror\n            options={scssOptions}\n            value={scss}\n            onBeforeChange={handleChangeScss}\n          />\n        </Col>\n      </Row>\n      <Row className=\"mt-2\">\n        <Col className=\"px-2\">\n          <Button type=\"primary\" onClick={handleClean}>\n            Clean\n          </Button>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'src/styles/index.scss';\nimport App from 'src/views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}